{"version":3,"sources":["utils.js","sound.js"],"names":["hslToRgb","h","s","l","r","g","b","hue2rgb","p","q","t","Math","round","WIDTH","HEIGHT","canvas","document","querySelector","ctx","getContext","width","height","analyzer","bufferLength","handleError","err","console","log","getAudio","stream","navigator","mediaDevices","getUserMedia","audio","catch","audioCtx","AudioContext","createAnalyser","source","createMediaStreamSource","connect","fftSize","frequencyBinCount","timeData","Uint8Array","frequencyData","drawTimeData","drawFrequency","getByteTimeDomainData","clearRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","forEach","data","i","v","y","moveTo","lineTo","stroke","requestAnimationFrame","getByteFrequencyData","barWidth","amount","percent","barHeight","fillStyle","fillRect"],"mappings":"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","file":"sound.66e01127.js","sourceRoot":"..","sourcesContent":["export function hslToRgb(h, s, l) {\n  let r;\n  let g;\n  let b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    const hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n","import { hslToRgb } from \"./utils\";\n\nconst WIDTH = 1500;\nconst HEIGHT = 1500;\n\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\ncanvas.width = WIDTH;\ncanvas.height = HEIGHT;\nlet analyzer;\nlet bufferLength;\n\nfunction handleError(err) {\n    console.log('You need to give access to your mic');\n}\n\nasync function getAudio() {\n    const stream = await navigator.mediaDevices.getUserMedia({ audio: true }).catch(handleError);\n    const audioCtx = new AudioContext();\n    analyzer = audioCtx.createAnalyser();\n    const source = audioCtx.createMediaStreamSource(stream);\n    source.connect(analyzer);\n    // How much data should we collect?\n    analyzer.fftSize = 2 ** 8; // ** is 'to the power of in JS'\n    // pull the data off the audio\n    // how many pieces of data are there?\n    bufferLength = analyzer.frequencyBinCount;\n    const timeData = new Uint8Array(bufferLength);\n    const frequencyData =  new Uint8Array(bufferLength);\n    console.log(frequencyData);\n    drawTimeData(timeData);\n    drawFrequency(frequencyData);\n}\n\nfunction drawTimeData(timeData) {\n    // inject time data into our timeData array\n    analyzer.getByteTimeDomainData(timeData);\n    // with data, lets turn it into a visual\n    // first, clear canvas\n    ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n    // second, set up some canvas drawing\n    ctx.lineWidth = 10;\n    ctx.strokeStyle = '#6A62FF';\n    ctx.beginPath();\n    const sliceWidth = WIDTH / bufferLength;\n    let x = 0;\n    timeData.forEach((data, i) => {\n        const v = data / 128;\n        const y = (v * HEIGHT) / 2;\n        // draw our lines!\n        if(i === 0) {\n            ctx.moveTo(x, y);\n        } else {\n            ctx.lineTo(x, y);\n        }\n        x += sliceWidth;\n    });\n\n    ctx.stroke();\n\n    // call itself ASAP\n    requestAnimationFrame(() => drawTimeData(timeData));\n}\n\nfunction drawFrequency(frequencyData) {\n    // 1. get frequency data into our frequencyData array\n    analyzer.getByteFrequencyData(frequencyData);\n    // 2. figure out bar width\n    const barWidth = (WIDTH / bufferLength) * 2.5;\n    console.log(barWidth);\n    let x = 0;\n    frequencyData.forEach(amount => {\n        // 0 to 255. Need to figure out height it will be\n        const percent = amount / 255;\n        const [h,s,l] = [360 / (percent * 360) - 0.5, 0.8, 0.5];\n        const barHeight = HEIGHT * percent * 0.5;\n        // convert color to HSL\n        const [r,g,b] = hslToRgb(h, s, l);\n        ctx.fillStyle = `rgb(${r},${g},${b})`;\n        ctx.fillRect(\n            x,\n            HEIGHT - barHeight,\n            barWidth,\n            barHeight\n        );\n        x += barWidth + 2;\n    });\n\n\n\n    requestAnimationFrame(() => drawFrequency(frequencyData));\n}\n\ngetAudio();\n\n"]}